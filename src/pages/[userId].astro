---
import Layout from "../layouts/Layout.astro";
import ClientInfo from "../components/Dashboard/ClientInfo.astro";
import PackageInfo from "../components/Dashboard/PackageInfo.astro";
import TicketsHistory from "../components/Dashboard/TicketsHistory.astro";
import ActiveServices from "../components/Dashboard/ActiveServices.astro";

// Habilitar renderizado del servidor para rutas din√°micas
export const prerender = false;

// Obtener el par√°metro din√°mico de la URL
const { userId } = Astro.params;

// Validaci√≥n robusta del userId
if (!userId) {
  return Astro.redirect('/19');
}

// Rechazar rutas que no son n√∫meros (como favicon.ico, robots.txt, etc.)
if (isNaN(Number(userId)) || userId.includes('.') || userId.includes('-') || userId.includes('_')) {
  // Para archivos est√°ticos, devolver 404
  if (userId.includes('.')) {
    return new Response(null, { status: 404 });
  }
  // Para otros casos, redirigir al usuario por defecto
  return Astro.redirect('/19');
}

// Validar que sea un n√∫mero v√°lido
const userIdNumber = parseInt(userId);
if (userIdNumber < 1 || userIdNumber > 999999) {
  return Astro.redirect('/19');
}

// Definir la p√°gina actual
const currentPage = "dashboard";

// Funci√≥n para cargar datos del usuario espec√≠fico desde la API
async function fetchDashboardData(userIdParam: string) {
  try {
    // Simular delay de API real
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Logs de API con usuario din√°mico
    console.log(`üöÄ Fetching dashboard data for user ID: ${userIdParam}`);
    console.log(`üìç API Endpoint: https://backend-express-c423b4135ed6.herokuapp.com/api/dashboard/usuario/${userIdParam}`);
    
    // Llamada real a la API con userId din√°mico
    const response = await fetch(`https://backend-express-c423b4135ed6.herokuapp.com/api/dashboard/usuario/${userIdParam}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status} for user ${userIdParam}`);
    }
    
    const apiResponse = await response.json();
    
    console.log(`‚úÖ Dashboard data loaded successfully for user ${userIdParam}`);
    console.log("üìä API Response:", {
      success: apiResponse.success,
      message: apiResponse.message,
      client: apiResponse.data.client.empresa,
      services: apiResponse.data.services.length,
      tickets: apiResponse.data.tickets.length
    });
    
    return apiResponse;
  } catch (error) {
    console.error(`‚ùå Error al cargar datos del dashboard para usuario ${userIdParam}:`, error);
    
    // Estructura de error compatible con API real
    return {
      success: false,
      message: `Error al obtener datos del dashboard para usuario ${userIdParam}`,
      data: {
        client: { 
          empresa: `Cliente #${userIdParam}`, 
          contacto: `Usuario #${userIdParam}`, 
          email: `usuario${userIdParam}@ejemplo.com`, 
          telefono: "N/A", 
          fechaRegistro: "N/A" 
        },
        package: { 
          name: "B√°sico", 
          status: "Activo", 
          nextBilling: "N/A", 
          activeServices: 0, 
          support247: false 
        },
        tickets: "Sin tickets disponibles",
        services: "Sin servicios disponibles",
        stats: { 
          totalServices: 0, 
          activeServices: 0, 
          completedServices: 0, 
          openTickets: 0 
        }
      }
    };
  }
}

// Obtener datos de la "API" para el usuario espec√≠fico
const apiResponse = await fetchDashboardData(userId);

// Verificar si la respuesta fue exitosa
if (!apiResponse.success) {
  console.warn(`‚ö†Ô∏è API returned error for user ${userId}:`, apiResponse.message);
}

// Extraer datos del wrapper 'data' con tipado expl√≠cito
const dashboardData = apiResponse.data as any;

// Extraer datos espec√≠ficos para cada componente
const clientData = {
  empresa: dashboardData.client.empresa,
  contacto: dashboardData.client.contacto,
  email: dashboardData.client.email,
  telefono: dashboardData.client.telefono,
  fechaRegistro: dashboardData.client.fechaRegistro
};

// Convertir tickets con tipo correcto, mapeando nuevos estados
const ticketsData = Array.isArray(dashboardData.tickets) ? dashboardData.tickets
  .filter((ticket: any) => ticket.status === "En Proceso" || ticket.status === "Resuelto" || ticket.status === "Pendiente")
  .map((ticket: any) => {
    // Mapear prioridades del nuevo formato
    let priority: "high" | "medium" | "low";
    switch (ticket.priority) {
      case "soporte":
        priority = "medium";
        break;
      case "urgente":
        priority = "high";
        break;
      default:
        priority = "low";
        break;
    }
    
    return {
      title: ticket.title,
      status: ticket.status as "En Proceso" | "Resuelto" | "Pendiente",
      priority: priority,
      dateOpened: ticket.dateOpened,
      ...(ticket.dateResolved && { dateResolved: ticket.dateResolved })
    };
  }) : [
    // Cuando tickets es una cadena o no es array, crear un ticket de placeholder
    {
      title: typeof dashboardData.tickets === 'string' ? dashboardData.tickets : "Sin tickets disponibles",
      status: "Resuelto" as "En Proceso" | "Resuelto" | "Pendiente",
      priority: "low" as "high" | "medium" | "low",
      dateOpened: "N/A"
    }
  ];

// Convertir servicios con tipo correcto, mapeando estados
const servicesData = Array.isArray(dashboardData.services) ? dashboardData.services.map((service: any) => {
  let status: "Activo" | "Entregado" | "Inactivo";
  
  switch (service.status) {
    case "Activo":
      status = "Activo";
      break;
    case "Entregado":
      status = "Entregado";
      break;
    case "En Configuraci√≥n":
    case "Pendiente":
    case "N/A":
    default:
      status = "Inactivo";
      break;
  }
  
  return {
    name: service.name,
    description: service.description,
    status: status,
    startDate: service.startDate,
    endDate: service.endDate
  };
}) : [
  // Cuando services es una cadena, crear un servicio de placeholder
  {
    name: typeof dashboardData.services === 'string' ? dashboardData.services : "Sin servicios disponibles",
    description: "No hay servicios activos en este momento",
    status: "Inactivo" as "Activo" | "Entregado" | "Inactivo",
    startDate: "N/A",
    endDate: "N/A"
  }
];

// Datos del paquete - mapear estados
const packageData = {
  packageName: dashboardData.package.name,
  status: dashboardData.package.status === "Vigente" ? "Activo" : dashboardData.package.status,
  nextBilling: dashboardData.package.nextBilling,
  activeServices: dashboardData.stats?.activeServices || dashboardData.package.activeServices,
  support247: dashboardData.package.support247
};

// Funci√≥n para extraer solo primer nombre y primer apellido
function getFirstNameLastName(fullName: string): string {
  if (!fullName || typeof fullName !== 'string') {
    return 'Usuario';
  }
  
  const nameParts = fullName.trim().split(' ').filter(part => part.length > 0);
  
  if (nameParts.length === 0) {
    return 'Usuario';
  } else if (nameParts.length === 1) {
    return nameParts[0];
  } else {
    // Primer nombre + primer apellido
    return `${nameParts[0]} ${nameParts[1]}`;
  }
}

// Procesar el nombre para mostrar solo primer nombre y primer apellido
const displayUserName = getFirstNameLastName(clientData.contacto);
---

<Layout currentPage={currentPage} userId={userId} userName={displayUserName}>
  <!-- User Info & Navigation -->
  <div class="mb-8 sm:mb-10 lg:mb-12">
    <!-- Header principal -->
    <div class="flex flex-col sm:flex-row sm:items-start justify-between mb-4">
      <div>
        <h2 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-4 lg:mb-5">
          Bienvenido, {clientData.contacto}
        </h2>
        <p class="text-lg sm:text-xl lg:text-2xl text-gray-600 leading-relaxed">Gestiona tus servicios y mantente al d√≠a con tu cuenta</p>
      </div>
    </div>
  </div>

  <!-- Dashboard Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8 lg:mb-10">
    
    <!-- Informaci√≥n del Cliente -->
    <ClientInfo clientData={clientData} />

    <!-- Paquete Contratado -->
    <PackageInfo 
      packageName={packageData.packageName}
      status={packageData.status}
      nextBilling={packageData.nextBilling}
      activeServices={packageData.activeServices}
      support247={packageData.support247}
    />

    <!-- √öltimos Tickets -->
    <TicketsHistory tickets={ticketsData} />
  </div>

  <!-- Servicios Activos -->
  <ActiveServices services={servicesData} />
  
</Layout>

<script is:inline>
  function initializeUserNavigation() {
    const userIdInput = document.getElementById('userIdInput');
    const goToUserButton = document.getElementById('goToUserButton');
    
    if (!userIdInput || !goToUserButton) {
      console.log('Elementos de navegaci√≥n de usuario no encontrados');
      return;
    }

    // Funci√≥n para navegar a usuario
    function goToUser() {
      const userId = userIdInput.value.trim();
      
      if (!userId) {
        alert('Por favor ingresa un ID de usuario');
        return;
      }
      
      if (isNaN(parseInt(userId)) || parseInt(userId) < 1) {
        alert('Por favor ingresa un ID de usuario v√°lido (n√∫mero mayor a 0)');
        return;
      }
      
      // Navegar a la URL del usuario
      window.location.href = `/${userId}`;
    }

    // Event listener para el bot√≥n
    goToUserButton.addEventListener('click', function(e) {
      e.preventDefault();
      goToUser();
    });

    // Event listener para presionar Enter en el input
    userIdInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        goToUser();
      }
    });

    console.log('Navegaci√≥n de usuario inicializada correctamente');
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeUserNavigation);
  } else {
    initializeUserNavigation();
  }

  // Re-inicializar despu√©s de navegaciones de Astro
  document.addEventListener('astro:after-swap', function() {
    setTimeout(initializeUserNavigation, 100);
  });

  // Tambi√©n intentar con el evento de p√°gina cargada
  document.addEventListener('astro:page-load', function() {
    setTimeout(initializeUserNavigation, 100);
  });
</script>

<!--
=== RUTAS DIN√ÅMICAS CON API REAL - DASHBOARD MULTI-USUARIO ===

Esta p√°gina implementa rutas din√°micas para mostrar dashboards de diferentes usuarios.

üåê RUTAS DIN√ÅMICAS DISPONIBLES:
- localhost:4322/1   ‚Üí Usuario ID: 1
- localhost:4322/19  ‚Üí Usuario ID: 19  
- localhost:4322/25  ‚Üí Usuario ID: 25
- localhost:4322/[cualquier-numero] ‚Üí Usuario ID: [numero]

üìç ENDPOINT DIN√ÅMICO: https://backend-express-c423b4135ed6.herokuapp.com/api/dashboard/usuario/[userId]
- Conexi√≥n directa con backend usando par√°metro din√°mico
- URL construida autom√°ticamente: `/usuario/${userId}`
- Validaci√≥n de userId num√©rico antes de hacer request

üîÑ PAR√ÅMETROS DE URL:
- Astro.params.userId: Extrae autom√°ticamente el ID de la URL
- Validaci√≥n: isNaN(Number(userIdParam)) para verificar n√∫mero v√°lido
- Error handling: Mensajes espec√≠ficos para cada usuario

üìä CARACTER√çSTICAS DIN√ÅMICAS:
‚úÖ URL params: [userId].astro captura cualquier ID num√©rico
‚úÖ API calls: Endpoint construido din√°micamente por usuario
‚úÖ Error handling: Fallback personalizado por usuario ID
‚úÖ Debug info: Muestra URL actual, userId y estado de API
‚úÖ Quick navigation: Botones para cambiar entre usuarios comunes
‚úÖ User context: T√≠tulo muestra el ID actual del usuario

üöÄ NAVEGACI√ìN R√ÅPIDA:
- Botones de navegaci√≥n r√°pida entre usuarios 1, 19, 25
- F√°cil extensi√≥n para agregar m√°s usuarios frecuentes
- URL limpia y amigable: /[numero] en lugar de /dashboard?user=[numero]

‚ö° FLUJO DE DATOS POR USUARIO:
| Usuario | URL | Endpoint API | Estado |
|---------|-----|--------------|--------|
| **1** | localhost:4322/1 | /api/dashboard/usuario/1 | ‚úÖ Din√°mico |
| **19** | localhost:4322/19 | /api/dashboard/usuario/19 | ‚úÖ Din√°mico |
| **25** | localhost:4322/25 | /api/dashboard/usuario/25 | ‚úÖ Din√°mico |
| **[N]** | localhost:4322/[N] | /api/dashboard/usuario/[N] | ‚úÖ Din√°mico |

üéØ VENTAJAS DE IMPLEMENTACI√ìN:
- SEO friendly: URLs limpias sin query parameters
- Bookmarkable: Cada usuario tiene URL √∫nica
- RESTful: Sigue convenciones est√°ndar de API REST  
- Scalable: Funciona con cualquier ID de usuario
- Debug ready: Info de debugging visible en desarrollo
-->
