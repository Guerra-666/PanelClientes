---
import Layout from "../layouts/Layout.astro";
import NavBar from "../components/NavBar.astro";
import SideBar from "../components/SideBar.astro";
import CompanyInfo from "../components/Profile/CompanyInfo.astro";
import AddressInfo from "../components/Profile/AddressInfo.astro";
import ContactsInfo from "../components/Profile/ContactsInfo.astro";
import ContractInfo from "../components/Profile/ContractInfo.astro";
import BankingInfo from "../components/Profile/BankingInfo.astro";

// Definir la p√°gina actual
const currentPage = "perfil";

// Simular llamada a API para obtener datos del perfil
async function fetchProfileData() {
  try {
    // Simular delay de API real
    await new Promise(resolve => setTimeout(resolve, 120));
    
    // Simular logs de API
    console.log("üöÄ Fetching profile data from API...");
    console.log("üìç API Endpoint: /api/profile/client-details");
    
    // En un entorno real, esto ser√≠a una llamada fetch() como:
    // const response = await fetch('/api/profile/client-details');
    // const data = await response.json();
    
    // Para esta simulaci√≥n, cargamos desde un archivo JSON local
    const profileData = await import("../data/profileData.json");
    
    console.log("‚úÖ Profile data loaded successfully");
    console.log("üìä Profile summary:", {
      company: profileData.default.profile.companyInfo.companyName,
      contacts: profileData.default.profile.additionalContacts.length + 1, // +1 for primary contact
      plan: profileData.default.profile.planInfo.currentPlan
    });
    
    return profileData.default;
  } catch (error) {
    console.error("‚ùå Error al cargar datos del perfil:", error);
    
    // Datos fallback en caso de error de API
    return {
      profile: {
        companyInfo: {
          companyName: "Empresa Desconocida",
          businessName: "N/A",
          rfc: "N/A",
          taxRegime: "N/A",
          industry: "N/A",
          companySize: "N/A",
          website: "N/A"
        },
        primaryContact: {
          name: "Usuario",
          position: "N/A",
          email: "email@ejemplo.com",
          phone: "N/A",
          mobile: "N/A"
        },
        addresses: {
          fiscal: {
            street: "N/A", neighborhood: "N/A", city: "N/A",
            state: "N/A", zipCode: "N/A", country: "N/A"
          },
          delivery: {
            street: "N/A", neighborhood: "N/A", city: "N/A",
            state: "N/A", zipCode: "N/A", country: "N/A"
          }
        },
        additionalContacts: [],
        contractInfo: {
          contractStartDate: "N/A",
          contractEndDate: "N/A"
        },
        bankingInfo: {
          primary: {
            bankName: "N/A",
            accountNumber: "N/A",
            clabe: "N/A"
          }
        }
      }
    };
  }
}

// Obtener datos de la "API"
const apiResponse = await fetchProfileData();
const profileData = apiResponse.profile;

// Mapear datos para compatibilidad con componentes existentes
const clientData = {
  // Informaci√≥n de la empresa
  companyName: profileData.companyInfo.companyName,
  businessName: profileData.companyInfo.businessName,
  rfc: profileData.companyInfo.rfc,
  taxRegime: profileData.companyInfo.taxRegime,
  industry: profileData.companyInfo.industry,
  companySize: profileData.companyInfo.companySize,
  website: profileData.companyInfo.website,

  // Informaci√≥n de contacto principal
  primaryContact: profileData.primaryContact.name,
  position: profileData.primaryContact.position,
  email: profileData.primaryContact.email,
  phone: profileData.primaryContact.phone,
  mobile: profileData.primaryContact.mobile,

  // Direcciones
  fiscalAddress: {
    street: profileData.addresses.fiscal.street,
    neighborhood: profileData.addresses.fiscal.neighborhood,
    city: profileData.addresses.fiscal.city,
    state: profileData.addresses.fiscal.state,
    zipCode: profileData.addresses.fiscal.zipCode,
    country: profileData.addresses.fiscal.country,
  },
  deliveryAddress: {
    street: profileData.addresses.delivery.street,
    neighborhood: profileData.addresses.delivery.neighborhood,
    city: profileData.addresses.delivery.city,
    state: profileData.addresses.delivery.state,
    zipCode: profileData.addresses.delivery.zipCode,
    country: profileData.addresses.delivery.country,
  },

  // Informaci√≥n de la cuenta y fechas
  clientId: (profileData as any).accountInfo?.clientId || "N/A",
  accountManager: (profileData as any).accountInfo?.accountManager?.name || "N/A",
  accountManagerEmail: (profileData as any).accountInfo?.accountManager?.email || "N/A",
  accountManagerPhone: (profileData as any).accountInfo?.accountManager?.phone || "N/A",
  registrationDate: (profileData as any).accountInfo?.registrationDate || "N/A",
  lastUpdate: (profileData as any).accountInfo?.lastUpdate || "N/A",
  
  // Informaci√≥n del contrato
  contractStartDate: profileData.contractInfo.contractStartDate,
  contractEndDate: profileData.contractInfo.contractEndDate,

  // Plan y servicios
  currentPlan: (profileData as any).planInfo?.currentPlan || "N/A",
  planStatus: (profileData as any).planInfo?.planStatus || "N/A",
  monthlyValue: (profileData as any).planInfo?.monthlyValue ? `$${(profileData as any).planInfo.monthlyValue.toLocaleString()} MXN` : "N/A",
  annualValue: (profileData as any).planInfo?.annualValue ? `$${(profileData as any).planInfo.annualValue.toLocaleString()} MXN` : "N/A",
  paymentMethod: (profileData as any).planInfo?.paymentMethod || "N/A",
  billingCycle: (profileData as any).planInfo?.billingCycle || "N/A",
  nextBilling: (profileData as any).planInfo?.nextBilling || "N/A",

  // Contactos adicionales mapeados
  additionalContacts: profileData.additionalContacts.map(contact => ({
    name: contact.name,
    position: contact.position,
    email: contact.email,
    phone: contact.phone,
    department: contact.department,
  })),

  // Informaci√≥n bancaria
  bankingInfo: {
    bankName: (profileData as any).bankingInfo?.primary?.bankName || "N/A",
    accountNumber: (profileData as any).bankingInfo?.primary?.accountNumber || "N/A",
    clabe: (profileData as any).bankingInfo?.primary?.clabe || "N/A",
  },
};
---
<Layout currentPage={currentPage}>
  <!-- Header Section -->
  <div class="mb-6 sm:mb-8 lg:mb-10 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 sm:gap-0">
    <div>
      <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 sm:mb-3">Perfil del Cliente</h2>
      <p class="text-sm sm:text-base text-gray-600">Informaci√≥n completa de la cuenta y empresa</p>
    </div>
    <div class="flex gap-3">
      <button 
        id="editButton"
        class="flex items-center px-4 sm:px-6 py-2 sm:py-3 text-sm sm:text-base font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm w-full sm:w-auto justify-center sm:justify-start"
      >
        <svg class="h-4 sm:h-5 w-4 sm:w-5 mr-2 sm:mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
        </svg>
        <span id="editButtonText">Editar Perfil</span>
      </button>
    </div>
  </div>

  <!-- Grid Principal - Responsive -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8 lg:mb-10">
    <!-- Columna Izquierda -->
    <div class="space-y-4 sm:space-y-6 lg:space-y-8">
      <!-- Informaci√≥n de la Empresa -->
      <CompanyInfo clientData={clientData} />
      
      <!-- Direcciones -->
      <AddressInfo 
        fiscalAddress={clientData.fiscalAddress}
        deliveryAddress={clientData.deliveryAddress}
      />
    </div>

    <!-- Columna Derecha -->
    <div class="space-y-4 sm:space-y-6 lg:space-y-8">
      <!-- Contactos -->
      <ContactsInfo 
        primaryContact={{
          name: clientData.primaryContact,
          position: clientData.position,
          email: clientData.email,
          phone: clientData.phone,
          mobile: clientData.mobile
        }}
        additionalContacts={clientData.additionalContacts}
      />
      
      <!-- Informaci√≥n de Contrato -->
      <ContractInfo 
        contractStartDate={clientData.contractStartDate}
        contractEndDate={clientData.contractEndDate}
      />
      
      <!-- Informaci√≥n Bancaria -->
      <BankingInfo bankingInfo={clientData.bankingInfo} />
    </div>
  </div>
  <script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const editButton = document.getElementById('editButton');
    const editButtonText = document.getElementById('editButtonText');
    let isEditing = false;

    if (editButton && editButtonText) {
      editButton.addEventListener('click', function() {
        isEditing = !isEditing;
        
        if (isEditing) {
          editButtonText.textContent = 'Guardar Cambios';
          editButton.className = 'flex items-center px-4 sm:px-6 py-2 sm:py-3 text-sm sm:text-base font-medium text-white bg-blue-600 border border-blue-600 rounded-lg hover:bg-blue-700 transition-colors shadow-sm w-full sm:w-auto justify-center sm:justify-start';
          editButton.innerHTML = `
            <svg class="h-4 sm:h-5 w-4 sm:w-5 mr-2 sm:mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 0V6a2 2 0 00-2-2H9a2 2 0 00-2 2v1m1 0h4m-4 0a1 1 0 011-1h2a1 1 0 011 1m-6 0h6"/>
            </svg>
            Guardar Cambios
          `;
        } else {
          editButtonText.textContent = 'Editar Perfil';
          editButton.className = 'flex items-center px-4 sm:px-6 py-2 sm:py-3 text-sm sm:text-base font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors shadow-sm w-full sm:w-auto justify-center sm:justify-start';
          editButton.innerHTML = `
            <svg class="h-4 sm:h-5 w-4 sm:w-5 mr-2 sm:mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
            </svg>
            Editar Perfil
          `;
        }
      });
    }
  });
</script>

</Layout>

<!--
=== SIMULACI√ìN DE API - PERFIL ===

Esta p√°gina simula la integraci√≥n con una API REST para obtener datos completos del perfil del cliente.

üìÇ ARCHIVO DE DATOS: src/data/profileData.json
- Estructura detallada con informaci√≥n empresarial completa
- Incluye: empresa, contactos, direcciones, contratos, planes, banca, preferencias y compliance
- Datos expandidos con informaci√≥n adicional como coordinadas, certificaciones, etc.

üîÑ FUNCI√ìN fetchProfileData():
- Simula el delay de una llamada HTTP real (120ms)
- En producci√≥n, reemplazar con: fetch('/api/profile/client-details')
- Manejo robusto de errores con datos fallback completos
- Logs detallados para debugging y monitoreo

üìä PROCESAMIENTO DE DATOS:
- Mapeo inteligente desde estructura JSON a formato de componentes
- Uso de casting TypeScript (as any) para propiedades opcionales
- Transformaci√≥n de valores num√©ricos a formato de moneda
- Compatibilidad completa con interfaces existentes

üéØ COMPONENTES ALIMENTADOS POR API:
- CompanyInfo: Informaci√≥n empresarial completa con RFC, r√©gimen fiscal, etc.
- AddressInfo: Direcciones fiscal y de entrega con datos detallados
- ContactsInfo: Contacto principal + contactos adicionales con departamentos
- ContractInfo: Fechas de contrato con informaci√≥n de renovaci√≥n
- BankingInfo: Informaci√≥n bancaria con m√∫ltiples cuentas

üìà DATOS MEJORADOS vs. ORIGINAL:
| Aspecto | Antes | Ahora |
|---------|--------|--------|
| Contactos | 3 b√°sicos | 4 con certificaciones y experiencia |
| Empresa | Info b√°sica | Datos legales completos + compliance |
| Banca | 1 cuenta | 2 cuentas (MXN + USD) con detalles SWIFT |
| Direcciones | B√°sicas | Con coordenadas GPS y detalles |
| Plan | Valores simples | Estructura completa con descuentos |

üîí FUNCIONALIDADES ADICIONALES:
- Informaci√≥n de compliance y auditor√≠as
- M√∫ltiples m√©todos de contacto y escalaci√≥n
- Preferencias de comunicaci√≥n y notificaciones
- Horarios de negocio y zona horaria
- Historial de actualizaciones y checksums

üöÄ MIGRACI√ìN A API REAL:
1. Reemplazar import JSON por llamadas fetch()
2. Implementar autenticaci√≥n y autorizaci√≥n
3. A√±adir cache inteligente y revalidaci√≥n
4. Implementar estados de loading y error en UI
5. Configurar webhooks para actualizaciones en tiempo real
-->
