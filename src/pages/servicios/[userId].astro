---
import Layout from "../../layouts/Layout.astro";
import PackageCard from "../../components/Services/PackageCard.astro";
import ServiceCard from "../../components/Services/ServiceCard.astro";
import BillingSummary from "../../components/Services/BillingSummary.astro";

// Definir la p√°gina actual
const currentPage = "servicios";

// Obtener el par√°metro userId de la URL
const { userId } = Astro.params;
const userIdParam = userId || "1"; // Default fallback

console.log(`üéØ Servicios Page - User ID: ${userIdParam}`);
console.log(`üìç URL: ${Astro.url.pathname}`);

// Funci√≥n para obtener datos de servicios desde API real
async function fetchServicesData(userId: string) {
  try {
    // URL del endpoint real
    const apiUrl = `https://backend-express-c423b4135ed6.herokuapp.com/api/services/usuario/${userId}`;
    
    console.log(`üöÄ Fetching services data from API...`);
    console.log(`üìç API Endpoint: ${apiUrl}`);
    
    // Realizar llamada a la API real
    const response = await fetch(apiUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const apiResponse = await response.json();
    
    console.log("‚úÖ Services data loaded successfully from API");
    console.log("üìä API Response structure:", {
      success: apiResponse.success,
      hasData: !!apiResponse.data,
      packages: apiResponse.data?.services?.contractedPackages?.length || 0,
      individualServices: apiResponse.data?.services?.individualServices?.length || 0
    });
    
    return apiResponse;
  } catch (error) {
    console.error(`‚ùå Error loading services data for user ${userId}:`, error);
    
    // Datos fallback en caso de error de API
    return {
      success: false,
      message: `Error al cargar servicios para usuario ${userId}`,
      data: {
        services: {
          contractedPackages: [
            {
              id: `PKG-${userId}-001`,
              name: "Paquete B√°sico",
              type: "package",
              status: "Activo",
              description: `Servicios b√°sicos para Usuario ${userId}`,
              monthlyPrice: 15999.00,
              currency: "MXN",
              contractDate: "01 Enero 2024",
              nextBilling: "01 Febrero 2024",
              remainingMonths: 11,
              autoRenewal: true,
              category: "Basic",
              priority: "standard",
              includedServices: [
                {
                  id: `SRV-${userId}-WEB`,
                  name: "Sitio web b√°sico",
                  description: "3 p√°ginas, dise√±o responsive",
                  details: { pages: 3, responsive: true }
                },
                {
                  id: `SRV-${userId}-HOST`,
                  name: "Hosting b√°sico",
                  description: "Hosting y SSL por 12 meses",
                  details: { ssl: true, hosting: "B√°sico - 3GB" }
                },
                {
                  id: `SRV-${userId}-SUP`,
                  name: "Soporte b√°sico",
                  description: "Lun-Vie 9:00-17:00",
                  details: { schedule: "Lun-Vie 9:00-17:00" }
                }
              ]
            }
          ],
          individualServices: [
            {
              id: `SRV-${userId}-MAINT`,
              name: "Mantenimiento Web",
              type: "individual",
              status: "Activo",
              description: `Mantenimiento b√°sico para Usuario ${userId}`,
              monthlyPrice: 3500.00,
              currency: "MXN",
              contractDate: "15 Enero 2024",
              nextBilling: "15 Febrero 2024",
              autoRenewal: true,
              category: "Maintenance",
              priority: "standard",
              features: [
                {
                  name: "Actualizaciones mensuales",
                  description: "Actualizaciones de seguridad mensuales",
                  frequency: "Mensual"
                },
                {
                  name: "Respaldos b√°sicos",
                  description: "Respaldos semanales",
                  frequency: "Semanal"
                },
                {
                  name: "Soporte email",
                  description: "Soporte v√≠a email en horario laboral",
                  allocation: "Email"
                }
              ]
            }
          ],
          billing: {
            summary: {
              totalMonthly: 19499.00,
              currency: "MXN",
              activeServices: 1,
              activePackages: 1,
              nextBillingDate: "01 Febrero 2024",
              paymentMethod: "Transferencia Bancaria",
              billingContact: `Usuario ${userId}`
            },
            taxes: {
              iva: 3119.84,
              subtotal: 19499.00,
              total: 22618.84
            }
          }
        }
      }
    };
  }
}

// Obtener datos de la API
const apiResponse = await fetchServicesData(userIdParam);

// Validar respuesta de API
if (!apiResponse.success) {
  console.warn(`‚ö†Ô∏è API returned error for user ${userIdParam}:`, apiResponse.message);
}

// Extraer datos del wrapper 'data' con tipado expl√≠cito
const servicesApiData = apiResponse.data as any;

// Mapear datos para compatibilidad con componentes
const contractedPackages = (servicesApiData.services?.contractedPackages || []).map((pkg: any) => ({
  id: pkg.id,
  name: pkg.name,
  status: pkg.status,
  description: pkg.description,
  monthlyPrice: pkg.monthlyPrice,
  currency: pkg.currency,
  contractDate: pkg.contractDate,
  nextBilling: pkg.nextBilling,
  remainingMonths: pkg.remainingMonths,
  includedServices: (pkg.includedServices || []).map((service: any) => ({
    name: service.name,
    description: service.description,
    details: service.details
  }))
}));

const individualServices = (servicesApiData.services?.individualServices || [])
  .filter((service: any) => service.status === "Activo") // Solo servicios activos
  .map((service: any) => ({
    id: service.id,
    name: service.name,
    status: service.status,
    description: service.description,
    monthlyPrice: service.monthlyPrice,
    totalPrice: service.totalPrice,
    currency: service.currency,
    contractDate: service.contractDate,
    nextBilling: service.nextBilling,
    autoRenewal: service.autoRenewal,
    features: service.features || [],
    progress: service.progress,
    estimatedCompletion: service.estimatedCompletion
  }));

const billingData = {
  summary: servicesApiData.services?.billing?.summary || {
    totalMonthly: 0,
    currency: "MXN",
    activeServices: 0,
    activePackages: 0,
    nextBillingDate: "N/A",
    paymentMethod: "N/A"
  },
  taxes: servicesApiData.services?.billing?.taxes || {
    iva: 0,
    subtotal: 0,
    total: 0
  }
};

// Funci√≥n para extraer solo primer nombre y primer apellido
function getFirstNameLastName(fullName: string): string {
  if (!fullName || typeof fullName !== 'string') {
    return 'Usuario';
  }
  
  const nameParts = fullName.trim().split(' ').filter(part => part.length > 0);
  
  if (nameParts.length === 0) {
    return 'Usuario';
  } else if (nameParts.length === 1) {
    return nameParts[0];
  } else {
    // Primer nombre + primer apellido
    return `${nameParts[0]} ${nameParts[1]}`;
  }
}

// Procesar el nombre para mostrar solo primer nombre y primer apellido
const displayUserName = getFirstNameLastName(billingData.summary.billingContact || `Usuario ${userIdParam}`);
---

<Layout currentPage={currentPage} userId={userIdParam} userName={displayUserName}>
  <div class="max-w-none">

    <!-- Header Section -->
    <div class="mb-8 sm:mb-10 lg:mb-12">
      <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-4 lg:mb-5">Mis Servicios Contratados</h1>
      <p class="text-lg sm:text-xl lg:text-2xl text-gray-600 leading-relaxed">Servicios activos y informaci√≥n de facturaci√≥n</p>
    </div>

    <!-- Paquetes Contratados -->
    {contractedPackages.length > 0 && (
      <div class="mb-8 sm:mb-10 lg:mb-12">
        <h2 class="text-2xl sm:text-3xl lg:text-4xl font-semibold text-gray-900 mb-6 sm:mb-8 lg:mb-10">Paquetes Contratados</h2>
        <div class="space-y-6 sm:space-y-8 lg:space-y-10">
          {contractedPackages.map(pkg => (
            <PackageCard package={pkg} />
          ))}
        </div>
      </div>
    )}

    <!-- Servicios Individuales -->
    {individualServices.length > 0 && (
      <div class="mb-8 sm:mb-10 lg:mb-12">
        <h2 class="text-2xl sm:text-3xl lg:text-4xl font-semibold text-gray-900 mb-6 sm:mb-8 lg:mb-10">Servicios Individuales</h2>
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-6 sm:gap-8 lg:gap-10">
          {individualServices.map(service => (
            <ServiceCard service={service} />
          ))}
        </div>
      </div>
    )}

    <!-- Resumen de Facturaci√≥n -->
    <BillingSummary billing={billingData} />
  </div>
</Layout>

<script is:inline>
  function initializeUserNavigation() {
    const userIdInput = document.getElementById('userIdInput');
    const goToUserButton = document.getElementById('goToUserButton');
    
    if (!userIdInput || !goToUserButton) {
      console.log('Elementos de navegaci√≥n de usuario no encontrados');
      return;
    }

    // Funci√≥n para navegar a usuario
    function goToUser() {
      const userId = userIdInput.value.trim();
      
      if (!userId) {
        alert('Por favor ingresa un ID de usuario');
        return;
      }
      
      // Validar que sea un n√∫mero v√°lido
      const userIdNumber = parseInt(userId);
      if (isNaN(userIdNumber) || userIdNumber < 1) {
        alert('Por favor ingresa un ID de usuario v√°lido (n√∫mero mayor a 0)');
        return;
      }
      
      console.log(`Navegando a servicios del usuario: ${userId}`);
      window.location.href = `/servicios/${userId}`;
    }

    // Event listeners
    goToUserButton.addEventListener('click', goToUser);
    
    userIdInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        goToUser();
      }
    });

    console.log('‚úÖ User navigation initialized for services page');
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', initializeUserNavigation);
</script>

<!--
=== SERVICIOS DIN√ÅMICOS POR USUARIO ===

Esta p√°gina implementa un sistema din√°mico de servicios por usuario, siguiendo el mismo patr√≥n que Dashboard y Perfil.

üéØ FUNCIONALIDAD PRINCIPAL:
- URL din√°mica: /servicios/[userId]
- API endpoint real: https://backend-express-c423b4135ed6.herokuapp.com/api/services/usuario/{userId}
- Datos espec√≠ficos por usuario
- Sistema de navegaci√≥n entre usuarios
- Fallback robusto en caso de error

üìä ESTRUCTURA DE DATOS:
- Paquetes contratados por usuario
- Servicios individuales activos √∫nicamente
- Informaci√≥n de facturaci√≥n personalizada
- Datos fallback con IDs √∫nicos por usuario

üîÑ INTEGRACI√ìN CONSISTENTE:
- Mismo patr√≥n de navegaci√≥n que Dashboard y Perfil
- Tama√±os de letra consistentes
- Layout y componentes reutilizados
- Debug info para desarrollo

üöÄ CARACTER√çSTICAS:
- Solo muestra servicios con status "Activo"
- Navegaci√≥n r√°pida entre usuarios frecuentes
- Input para cambiar de usuario din√°micamente
- Informaci√≥n espec√≠fica del usuario en headers

üì± RESPONSIVE:
- Dise√±o adaptativo en todos los dispositivos
- Tama√±os de letra escalables
- Componentes responsive mantenidos
-->
