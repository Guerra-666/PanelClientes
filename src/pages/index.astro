---
import Layout from "../layouts/Layout.astro";
import NavBar from "../components/NavBar.astro";
import SideBar from "../components/SideBar.astro";
import Card from "../components/Card.astro";
import ClientInfo from "../components/Dashboard/ClientInfo.astro";
import PackageInfo from "../components/Dashboard/PackageInfo.astro";
import TicketsHistory from "../components/Dashboard/TicketsHistory.astro";
import ActiveServices from "../components/Dashboard/ActiveServices.astro";

// Definir la p√°gina actual
const currentPage = "dashboard";

// Simular llamada a API - Cargar datos del JSON
async function fetchDashboardData() {
  try {
    // Simular delay de API real
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Simular logs de API
    console.log("üöÄ Fetching dashboard data from API...");
    console.log("üìç API Endpoint: /api/dashboard/client-data");
    
    // En un entorno real, esto ser√≠a una llamada fetch() como:
    // const response = await fetch('/api/dashboard/client-data');
    // const data = await response.json();
    
    // Para esta simulaci√≥n, cargamos desde un archivo JSON local
    const dashboardData = await import("../data/dashboardData.json");
    
    console.log("‚úÖ Dashboard data loaded successfully");
    console.log("üìä Data summary:", {
      client: dashboardData.default.client.empresa,
      services: dashboardData.default.services.length,
      tickets: dashboardData.default.tickets.length
    });
    
    return dashboardData.default;
  } catch (error) {
    console.error("‚ùå Error al cargar datos del dashboard:", error);
    
    // Datos fallback en caso de error de API
    return {
      client: { 
        empresa: "Cliente", 
        contacto: "Usuario", 
        email: "email@ejemplo.com", 
        telefono: "N/A", 
        fechaRegistro: "N/A" 
      },
      package: { 
        name: "B√°sico", 
        status: "Activo", 
        nextBilling: "N/A", 
        activeServices: 0, 
        support247: false 
      },
      tickets: [],
      services: [],
      stats: { 
        totalServices: 0, 
        activeServices: 0, 
        completedServices: 0, 
        openTickets: 0 
      }
    };
  }
}

// Obtener datos de la "API"
const apiResponse = await fetchDashboardData();

// Extraer datos espec√≠ficos para cada componente
const clientData = {
  empresa: apiResponse.client.empresa,
  contacto: apiResponse.client.contacto,
  email: apiResponse.client.email,
  telefono: apiResponse.client.telefono,
  fechaRegistro: apiResponse.client.fechaRegistro
};

// Convertir tickets con tipo correcto
const ticketsData = apiResponse.tickets
  .filter(ticket => ticket.status === "En progreso" || ticket.status === "Resuelto")
  .map(ticket => ({
    title: ticket.title,
    status: ticket.status as "En progreso" | "Resuelto",
    priority: ticket.priority as "high" | "medium" | "low",
    dateOpened: ticket.dateOpened,
    ...(ticket.dateResolved && { dateResolved: ticket.dateResolved })
  }));

// Convertir servicios con tipo correcto, mapeando estados
const servicesData = apiResponse.services.map(service => {
  let status: "Activo" | "Entregado" | "Inactivo";
  
  switch (service.status) {
    case "Activo":
      status = "Activo";
      break;
    case "Entregado":
      status = "Entregado";
      break;
    case "En Configuraci√≥n":
    case "Pendiente":
    default:
      status = "Inactivo";
      break;
  }
  
  return {
    name: service.name,
    description: service.description,
    status: status,
    startDate: service.startDate,
    endDate: service.endDate
  };
});

// Datos del paquete
const packageData = {
  packageName: apiResponse.package.name,
  status: apiResponse.package.status,
  nextBilling: apiResponse.package.nextBilling,
  activeServices: apiResponse.stats.activeServices,
  support247: apiResponse.package.support247
};
---

<Layout currentPage={currentPage}>
  <!-- Welcome Section -->
  <div class="mb-6 sm:mb-8 lg:mb-10">
    <h2 class="text-2xl sm:text-3xl font-bold text-gray-900 mb-2 sm:mb-3">Bienvenido, {clientData.contacto}</h2>
    <p class="text-sm sm:text-base text-gray-600">Gestiona tus servicios y mantente al d√≠a con tu cuenta</p>
  </div>

  <!-- Dashboard Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8 lg:mb-10">
    
    <!-- Informaci√≥n del Cliente -->
    <ClientInfo clientData={clientData} />

    <!-- Paquete Contratado -->
    <PackageInfo 
      packageName={packageData.packageName}
      status={packageData.status}
      nextBilling={packageData.nextBilling}
      activeServices={packageData.activeServices}
      support247={packageData.support247}
    />

    <!-- √öltimos Tickets -->
    <TicketsHistory tickets={ticketsData} />
  </div>

  <!-- Servicios Activos -->
  <ActiveServices services={servicesData} />
</Layout>

<!--
=== SIMULACI√ìN DE API ===

Esta p√°gina simula la integraci√≥n con una API REST para obtener datos din√°micos del dashboard.

üìÇ ARCHIVO DE DATOS: src/data/dashboardData.json
- Contiene todos los datos estructurados que normalmente vendr√≠an de una API
- Incluye: cliente, paquetes, tickets, servicios, estad√≠sticas y notificaciones

üîÑ FUNCI√ìN fetchDashboardData():
- Simula el delay de una llamada HTTP real (100ms)
- En producci√≥n, reemplazar con: fetch('/api/dashboard/client-data')
- Incluye manejo de errores con datos fallback
- Logs detallados para debugging

üìä PROCESAMIENTO DE DATOS:
- Los datos JSON se mapean a las interfaces TypeScript requeridas
- Se filtran y transforman seg√∫n las necesidades de cada componente
- Conversi√≥n de tipos para compatibilidad con componentes existentes

üéØ COMPONENTES ALIMENTADOS POR API:
- ClientInfo: Datos del cliente y empresa
- PackageInfo: Informaci√≥n del paquete contratado
- TicketsHistory: Historial de tickets filtrado
- ActiveServices: Lista de servicios con estados mapeados

üöÄ MIGRACI√ìN A API REAL:
1. Reemplazar import JSON por llamadas fetch()
2. Agregar headers de autorizaci√≥n si es necesario
3. Implementar cache y revalidaci√≥n de datos
4. A√±adir estados de loading y error en el UI
-->