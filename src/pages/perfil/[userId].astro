---
import Layout from "../../layouts/Layout.astro";
import CompanyInfo from "../../components/Profile/CompanyInfo.astro";
import AddressInfo from "../../components/Profile/AddressInfo.astro";
import ContactsInfo from "../../components/Profile/ContactsInfo.astro";
import ContractInfo from "../../components/Profile/ContractInfo.astro";
import BankingInfo from "../../components/Profile/BankingInfo.astro";

// Habilitar renderizado del servidor para rutas din√°micas
export const prerender = false;

// Obtener el par√°metro din√°mico de la URL
const { userId } = Astro.params;

// Validaci√≥n robusta del userId
if (!userId) {
  return Astro.redirect('/perfil/19');
}

// Rechazar rutas que no son n√∫meros (como favicon.ico, robots.txt, etc.)
if (isNaN(Number(userId)) || userId.includes('.') || userId.includes('-') || userId.includes('_')) {
  // Para archivos est√°ticos, devolver 404
  if (userId.includes('.')) {
    return new Response(null, { status: 404 });
  }
  // Para otros casos, redirigir al usuario por defecto
  return Astro.redirect('/perfil/19');
}

// Validar que sea un n√∫mero v√°lido
const userIdNumber = parseInt(userId);
if (userIdNumber < 1 || userIdNumber > 999999) {
  return Astro.redirect('/perfil/19');
}

// Definir la p√°gina actual
const currentPage = "perfil";

// Funci√≥n para cargar datos del perfil del usuario espec√≠fico desde la API
async function fetchProfileData(userIdParam: string) {
  try {
    // Simular delay de API real
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Logs de API con usuario din√°mico
    console.log(`üöÄ Fetching profile data for USER ID: ${userIdParam}`);
    console.log(`üìç API Endpoint: https://backend-express-c423b4135ed6.herokuapp.com/api/profile/usuario/${userIdParam}`);
    
    // Llamada real a la API con USUARIO ID din√°mico
    const response = await fetch(`https://backend-express-c423b4135ed6.herokuapp.com/api/profile/usuario/${userIdParam}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status} for USER ${userIdParam}`);
    }
    
    const apiResponse = await response.json();
    
    console.log(`‚úÖ Profile data loaded successfully for USER ${userIdParam}`);
    console.log("üìä API Response:", {
      success: apiResponse.success,
      message: apiResponse.message,
      company: apiResponse.data.profile.companyInfo.companyName,
      contacts: apiResponse.data.profile.additionalContacts.length + 1, // +1 for primary contact
      plan: apiResponse.data.profile.planInfo.currentPlan
    });
    
    return apiResponse;
  } catch (error) {
    console.error(`‚ùå Error al cargar datos del perfil para USUARIO ${userIdParam}:`, error);
    
    // Estructura de error compatible con API real
    return {
      success: false,
      message: `Error al obtener datos del perfil para USUARIO ${userIdParam}`,
      data: {
        profile: {
          companyInfo: {
            companyName: `Empresa del Usuario #${userIdParam}`,
            businessName: `Cliente #${userIdParam}`,
            rfc: "N/A",
            taxRegime: "N/A",
            industry: "N/A",
            companySize: "N/A",
            website: "N/A",
            establishedYear: "N/A",
            legalRepresentative: `Contacto del Usuario #${userIdParam}`,
            companyType: "N/A"
          },
          primaryContact: {
            name: `Contacto del Usuario #${userIdParam}`,
            position: "N/A",
            email: `contacto.usuario${userIdParam}@ejemplo.com`,
            phone: "N/A",
            mobile: "N/A",
            extension: "N/A",
            department: "N/A",
            directReports: 0,
            yearsWithCompany: 0
          },
          addresses: {
            fiscal: {
              street: "N/A", neighborhood: "N/A", city: "N/A",
              state: "N/A", zipCode: "N/A", country: "M√©xico",
              coordinates: { latitude: "0", longitude: "0" }
            },
            delivery: {
              street: "N/A", neighborhood: "N/A", city: "N/A",
              state: "N/A", zipCode: "N/A", country: "M√©xico",
              coordinates: { latitude: "0", longitude: "0" }
            }
          },
          additionalContacts: [],
          accountInfo: {
            clientId: `CLI-${userIdParam}`,
            accountManager: {
              name: "N/A",
              email: "N/A",
              phone: "N/A",
              mobile: "N/A",
              position: "N/A",
              yearsOfExperience: 0,
              specialization: "N/A"
            },
            registrationDate: "N/A",
            lastUpdate: "N/A",
            accountStatus: "Activo",
            creditRating: "N/A",
            preferredLanguage: "Espa√±ol",
            timeZone: "America/Mexico_City"
          },
          contractInfo: {
            contractId: `CONT-${userIdParam}`,
            contractStartDate: "N/A",
            contractEndDate: "N/A",
            contractType: "N/A",
            renewalNotice: "N/A",
            terminationClause: "N/A",
            governingLaw: "N/A",
            signedBy: "N/A",
            witnessedBy: "N/A",
            digitalSignature: false,
            lastAmendment: "N/A"
          },
          planInfo: {
            currentPlan: "Plan B√°sico",
            planStatus: "Activo",
            planCategory: "B√°sico",
            monthlyValue: 0,
            annualValue: 0,
            currency: "MXN",
            paymentMethod: "N/A",
            billingCycle: "N/A",
            nextBilling: "N/A",
            autoRenewal: false,
            discountApplied: 0,
            originalPrice: 0,
            paymentTerms: "N/A",
            invoiceFormat: "N/A"
          },
          bankingInfo: {
            primary: {
              bankName: "N/A",
              bankCode: "N/A",
              accountNumber: "N/A",
              accountType: "N/A",
              clabe: "N/A",
              swift: "N/A",
              accountHolder: "N/A",
              currency: "MXN",
              status: "N/A"
            },
            secondary: {
              bankName: "N/A",
              bankCode: "N/A",
              accountNumber: "N/A",
              accountType: "N/A",
              clabe: "N/A",
              swift: "N/A",
              accountHolder: "N/A",
              currency: "USD",
              status: "N/A"
            }
          },
          preferences: {
            communicationMethod: "Email",
            reportingFrequency: "Mensual",
            notificationSettings: {
              emailNotifications: true,
              smsNotifications: false,
              systemAlerts: true,
              marketingEmails: false
            },
            supportLevel: "B√°sico",
            escalationPath: [],
            businessHours: {
              timezone: "CST",
              monday: "09:00-18:00",
              tuesday: "09:00-18:00",
              wednesday: "09:00-18:00",
              thursday: "09:00-18:00",
              friday: "09:00-18:00",
              saturday: "Cerrado",
              sunday: "Cerrado"
            }
          },
          complianceInfo: {
            dataProtection: {
              gdprCompliant: false,
              dataRetentionPeriod: "N/A",
              privacyOfficer: "N/A",
              lastAudit: "N/A",
              nextAudit: "N/A"
            },
            financialCompliance: {
              taxStatus: "N/A",
              lastTaxFiling: "N/A",
              accountantFirm: "N/A",
              auditFirm: "N/A"
            }
          },
          stats: {
            totalServices: 0,
            activeServices: 0,
            completedServices: 0,
            totalTickets: 0,
            openTickets: 0,
            closedTickets: 0
          }
        }
      }
    };
  }
}

// Obtener datos de la "API" para el USUARIO espec√≠fico
const apiResponse = await fetchProfileData(userId);

// Verificar si la respuesta fue exitosa
if (!apiResponse.success) {
  console.warn(`‚ö†Ô∏è API returned error for USER ${userId}:`, apiResponse.message);
}

// Extraer datos del wrapper 'data' con tipado expl√≠cito
const profileData = apiResponse.data.profile as any;

// Funci√≥n para extraer solo primer nombre y primer apellido
function getFirstNameLastName(fullName: string): string {
  if (!fullName || typeof fullName !== 'string') {
    return 'Usuario';
  }
  
  const nameParts = fullName.trim().split(' ').filter(part => part.length > 0);
  
  if (nameParts.length === 0) {
    return 'Usuario';
  } else if (nameParts.length === 1) {
    return nameParts[0];
  } else {
    // Primer nombre + primer apellido
    return `${nameParts[0]} ${nameParts[1]}`;
  }
}

// Procesar el nombre para mostrar solo primer nombre y primer apellido
const displayUserName = getFirstNameLastName(profileData.primaryContact.name);

// Mapear datos para compatibilidad con componentes existentes
const clientData = {
  // Informaci√≥n de la empresa
  companyName: profileData.companyInfo.companyName,
  businessName: profileData.companyInfo.businessName,
  rfc: profileData.companyInfo.rfc,
  taxRegime: profileData.companyInfo.taxRegime,
  industry: profileData.companyInfo.industry,
  companySize: profileData.companyInfo.companySize,
  website: profileData.companyInfo.website,

  // Informaci√≥n de contacto principal
  primaryContact: profileData.primaryContact.name,
  position: profileData.primaryContact.position,
  email: profileData.primaryContact.email,
  phone: profileData.primaryContact.phone,
  mobile: profileData.primaryContact.mobile,

  // Direcciones
  fiscalAddress: {
    street: profileData.addresses.fiscal.street,
    neighborhood: profileData.addresses.fiscal.neighborhood,
    city: profileData.addresses.fiscal.city,
    state: profileData.addresses.fiscal.state,
    zipCode: profileData.addresses.fiscal.zipCode,
    country: profileData.addresses.fiscal.country,
  },
  deliveryAddress: {
    street: profileData.addresses.delivery.street,
    neighborhood: profileData.addresses.delivery.neighborhood,
    city: profileData.addresses.delivery.city,
    state: profileData.addresses.delivery.state,
    zipCode: profileData.addresses.delivery.zipCode,
    country: profileData.addresses.delivery.country,
  },

  // Informaci√≥n de la cuenta y fechas
  clientId: profileData.accountInfo?.clientId || "N/A",
  accountManager: profileData.accountInfo?.accountManager?.name || "N/A",
  accountManagerEmail: profileData.accountInfo?.accountManager?.email || "N/A",
  accountManagerPhone: profileData.accountInfo?.accountManager?.phone || "N/A",
  registrationDate: profileData.accountInfo?.registrationDate || "N/A",
  lastUpdate: profileData.accountInfo?.lastUpdate || "N/A",
  
  // Informaci√≥n del contrato
  contractStartDate: profileData.contractInfo.contractStartDate,
  contractEndDate: profileData.contractInfo.contractEndDate,

  // Plan y servicios
  currentPlan: profileData.planInfo?.currentPlan || "N/A",
  planStatus: profileData.planInfo?.planStatus || "N/A",
  monthlyValue: profileData.planInfo?.monthlyValue ? `$${profileData.planInfo.monthlyValue.toLocaleString()} MXN` : "N/A",
  annualValue: profileData.planInfo?.annualValue ? `$${profileData.planInfo.annualValue.toLocaleString()} MXN` : "N/A",
  paymentMethod: profileData.planInfo?.paymentMethod || "N/A",
  billingCycle: profileData.planInfo?.billingCycle || "N/A",
  nextBilling: profileData.planInfo?.nextBilling || "N/A",

  // Contactos adicionales mapeados
  additionalContacts: profileData.additionalContacts.map((contact: any) => ({
    name: contact.name,
    position: contact.position,
    email: contact.email,
    phone: contact.phone,
    department: contact.department,
  })),

  // Informaci√≥n bancaria
  bankingInfo: {
    bankName: profileData.bankingInfo?.primary?.bankName || "N/A",
    accountNumber: profileData.bankingInfo?.primary?.accountNumber || "N/A",
    clabe: profileData.bankingInfo?.primary?.clabe || "N/A",
  },
};
---

<Layout currentPage={currentPage} userId={userId} userName={displayUserName}>
  <!-- User Info & Navigation -->
  <div class="mb-8 sm:mb-10 lg:mb-12">
    <!-- Header principal -->
    <div class="flex flex-col sm:flex-row sm:items-start justify-between mb-4">
      <div>
        <h2 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-3 sm:mb-4 lg:mb-5">
          Perfil de Usuario

        </h2>
        <p class="text-lg sm:text-xl lg:text-2xl text-gray-600 leading-relaxed">Informaci√≥n completa su perfil.</p>
      </div>
    </div>
  </div>

  <!-- Grid Principal - Responsive -->
  <div class="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8 lg:mb-10">
    <!-- Columna Izquierda -->
    <div class="space-y-4 sm:space-y-6 lg:space-y-8">
      <!-- Informaci√≥n de la Empresa (Datos del cliente √∫nicamente) -->
      <CompanyInfo clientData={clientData} />
      
      <!-- Direcciones del Cliente -->
      <AddressInfo 
        fiscalAddress={clientData.fiscalAddress}
        deliveryAddress={clientData.deliveryAddress}
      />
    </div>

    <!-- Columna Derecha -->
    <div class="space-y-4 sm:space-y-6 lg:space-y-8">
      <!-- Contactos del Cliente -->
      <ContactsInfo 
        primaryContact={{
          name: clientData.primaryContact,
          position: clientData.position,
          email: clientData.email,
          phone: clientData.phone,
          mobile: clientData.mobile
        }}
        additionalContacts={clientData.additionalContacts}
      />
      
      <!-- Informaci√≥n de Contrato del Usuario -->
      <ContractInfo 
        contractStartDate={clientData.contractStartDate}
        contractEndDate={clientData.contractEndDate}
      />
      
      <!-- Informaci√≥n Bancaria del Cliente -->
      <BankingInfo bankingInfo={clientData.bankingInfo} />
    </div>
  </div>
  </div>
</Layout>

<script is:inline>
  function initializeUserNavigation() {
    const userIdInput = document.getElementById('userIdInput');
    const goToUserButton = document.getElementById('goToUserButton');
    
    if (!userIdInput || !goToUserButton) {
      console.log('Elementos de navegaci√≥n de usuario no encontrados');
      return;
    }

    // Funci√≥n para navegar a usuario
    function goToUser() {
      const userId = userIdInput.value.trim();
      
      if (!userId) {
        alert('Por favor ingresa un ID de usuario');
        return;
      }
      
      if (isNaN(parseInt(userId)) || parseInt(userId) < 1) {
        alert('Por favor ingresa un ID de usuario v√°lido (n√∫mero mayor a 0)');
        return;
      }
      
      // Navegar a la URL del perfil del usuario
      window.location.href = `/perfil/${userId}`;
    }

    // Event listener para el bot√≥n
    goToUserButton.addEventListener('click', function(e) {
      e.preventDefault();
      goToUser();
    });

    // Event listener para presionar Enter en el input
    userIdInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        goToUser();
      }
    });

    console.log('Navegaci√≥n de usuario de perfil inicializada correctamente');
  }

  // Inicializar cuando el DOM est√© listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeUserNavigation);
  } else {
    initializeUserNavigation();
  }

  // Re-inicializar despu√©s de navegaciones de Astro
  document.addEventListener('astro:after-swap', function() {
    setTimeout(initializeUserNavigation, 100);
  });

  // Tambi√©n intentar con el evento de p√°gina cargada
  document.addEventListener('astro:page-load', function() {
    setTimeout(initializeUserNavigation, 100);
  });
</script>

<!--
=== SISTEMA DE USUARIOS VS CONTACTOS - PERFIL MULTI-USUARIO ===

üîë ARQUITECTURA DE ENTIDADES PARA PERFIL:

**USUARIOS (Entidad Principal)**
- Tienen credenciales de login (usuario + contrase√±a)
- Cada usuario tiene un ID √∫nico num√©rico
- Son los √∫nicos que pueden acceder al sistema
- La API funciona EXCLUSIVAMENTE con IDs de usuario
- Un usuario puede tener m√∫ltiples perfiles empresariales

**CONTACTOS (Solo Informaci√≥n)**
- Persona de contacto del cliente (informativa √∫nicamente)
- NO tienen credenciales de acceso al sistema
- Solo se usan para comunicaci√≥n (email, tel√©fono)
- Aparecen en la info del cliente pero NO determinan el acceso

üåê RUTAS DIN√ÅMICAS POR USUARIO:
- localhost:4321/perfil/1   ‚Üí Perfil del USUARIO ID: 1
- localhost:4321/perfil/19  ‚Üí Perfil del USUARIO ID: 19  
- localhost:4321/perfil/25  ‚Üí Perfil del USUARIO ID: 25
- localhost:4321/perfil/[numero] ‚Üí Perfil del USUARIO ID: [numero]

üìç ENDPOINT DIN√ÅMICO: https://backend-express-c423b4135ed6.herokuapp.com/api/profile/usuario/[USUARIO_ID]
- La API usa exclusivamente el ID de USUARIO como par√°metro
- URL: `/api/profile/usuario/${userID}` (NO contacto ID)
- Cada usuario ve √∫nicamente SU informaci√≥n de perfil

üîÑ FLUJO DE AUTENTICACI√ìN:
| Entidad | Tiene Login | Accede al Sistema | Determina Datos API |
|---------|-------------|------------------|---------------------|
| **Usuario** | ‚úÖ S√≠ (user/pass) | ‚úÖ S√≠ | ‚úÖ S√≠ (ID √∫nico) |
| **Contacto** | ‚ùå No | ‚ùå No | ‚ùå No (solo info) |

üìä ESTRUCTURA DE DATOS POR USUARIO:
```json
{
  "data": {
    "profile": {
      "companyInfo": {...}, // Informaci√≥n empresarial del cliente
      "primaryContact": {...}, // Contacto principal (NO usuario del sistema)
      "addresses": {...}, // Direcciones del cliente
      "additionalContacts": [...], // Contactos adicionales del cliente
      "accountInfo": {...}, // Info de la cuenta del USUARIO
      "contractInfo": {...}, // Contrato del USUARIO
      "planInfo": {...}, // Plan del USUARIO
      "bankingInfo": {...} // Info bancaria del cliente
    }
  }
}
```

üéØ EJEMPLOS PR√ÅCTICOS:
- **Usuario ID 19**: Juan P√©rez (credenciales: juan/pass123)
  - Contacto del cliente: "Mar√≠a Gonz√°lez" (solo para comunicaci√≥n)
  - API: `/usuario/19` ‚Üí Perfil de Juan, contacto es Mar√≠a
  
- **Usuario ID 25**: Carlos L√≥pez (credenciales: carlos/mypass)  
  - Contacto del cliente: "Ana Mart√≠nez" (solo para comunicaci√≥n)
  - API: `/usuario/25` ‚Üí Perfil de Carlos, contacto es Ana

‚ö° NAVEGACI√ìN DEL SISTEMA:
- Input num√©rico: Cambia entre IDs de USUARIO
- Botones r√°pidos: Acceso directo a perfiles de usuarios frecuentes  
- URLs amigables: /perfil/[numeroUsuario] para f√°cil bookmark
- Debug info: Muestra claramente Usuario ID vs Contacto nombre

üîê SEGURIDAD:
- Cada usuario solo puede ver SU propio perfil
- El ID de usuario determina qu√© informaci√≥n se muestra
- Sin ID de usuario v√°lido ‚Üí Sin acceso a datos de perfil
-->
