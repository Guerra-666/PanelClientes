---
export interface Props {
  userName: string;
}

const { userName } = Astro.props;
---

<header class="bg-white border-b border-gray-200 px-4 sm:px-6 py-3">
  <div class="flex items-center justify-between">
    <!-- Logo -->
    <div class="flex items-center space-x-2">
      <svg class="h-7 w-7 sm:h-8 sm:w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
      </svg>
      <span class="text-lg sm:text-xl font-bold text-gray-900">[ NEVEN ]</span>
    </div>

    <!-- Seccion derecha-->
    <div class="flex items-center">
      <!--  menu dropdown -->
      <div class="relative">
        <button 
          id="userMenuButton"
          class="flex items-center space-x-2 sm:space-x-3 p-2 sm:p-3 rounded-lg hover:bg-gray-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-200"
          >
          <div class="h-9 w-9 sm:h-10 sm:w-10 rounded-full bg-gray-300 flex items-center justify-center">
            <span class="text-sm sm:text-base font-medium text-gray-700">
              {userName.split(' ').map((name: string) => name[0]).join('')}
            </span>
          </div>
          <span class="text-base font-medium text-gray-900 hidden sm:block">{userName}</span>
          <svg class="h-4 w-4 sm:h-5 sm:w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
          </svg>
        </button>

        <!-- menu -->
        <div 
          id="userDropdown"
          class="absolute right-0 mt-2 w-48 sm:w-52 bg-white rounded-lg shadow-lg border border-gray-200 opacity-0 invisible transform translate-y-1 transition-all duration-200 z-50"
        >
          <div class="py-1 sm:py-2">
            <div class="px-3 sm:px-4 py-2 sm:py-3 text-xs sm:text-sm text-gray-500 border-b border-gray-100">
              Sesión activa
            </div>
            
            <div class="border-t border-gray-100"></div>
            <button 
              id="logoutButton"
              class="flex items-center w-full px-3 sm:px-4 py-2 sm:py-3 text-xs sm:text-sm text-red-600 hover:bg-red-50 transition-colors"
            >
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
              </svg>
              Cerrar Sesión
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script is:inline>
  // Función para inicializar el dropdown
  function initializeDropdown() {
    const userMenuButton = document.getElementById('userMenuButton');
    const userDropdown = document.getElementById('userDropdown');
    const logoutButton = document.getElementById('logoutButton');
    
    if (!userMenuButton || !userDropdown || !logoutButton) {
      console.log('Elementos del dropdown no encontrados');
      return;
    }

    // Remover listeners previos para evitar duplicados
    const newUserMenuButton = userMenuButton.cloneNode(true);
    const newLogoutButton = logoutButton.cloneNode(true);
    userMenuButton.parentNode.replaceChild(newUserMenuButton, userMenuButton);
    logoutButton.parentNode.replaceChild(newLogoutButton, logoutButton);

    // Referencias actualizadas
    const freshUserMenuButton = document.getElementById('userMenuButton');
    const freshLogoutButton = document.getElementById('logoutButton');

    // Asegurar que el dropdown esté cerrado
    userDropdown.classList.add('opacity-0', 'invisible', 'translate-y-1');
    userDropdown.classList.remove('opacity-100', 'visible', 'translate-y-0');

    function toggleDropdown(event) {
      event.preventDefault();
      event.stopPropagation();
      
      const isVisible = userDropdown.classList.contains('opacity-100');
      
      if (isVisible) {
        userDropdown.classList.add('opacity-0', 'invisible', 'translate-y-1');
        userDropdown.classList.remove('opacity-100', 'visible', 'translate-y-0');
      } else {
        userDropdown.classList.remove('opacity-0', 'invisible', 'translate-y-1');
        userDropdown.classList.add('opacity-100', 'visible', 'translate-y-0');
      }
    }

    function hideDropdown() {
      userDropdown.classList.add('opacity-0', 'invisible', 'translate-y-1');
      userDropdown.classList.remove('opacity-100', 'visible', 'translate-y-0');
    }

    function logout(event) {
      event.preventDefault();
      if (confirm('¿Estás seguro de que deseas cerrar sesión?')) {
        window.location.href = '/login';
      }
    }

    // Agregar event listeners
    freshUserMenuButton.addEventListener('click', toggleDropdown);
    freshLogoutButton.addEventListener('click', logout);

    // Cerrar dropdown al hacer clic fuera
    const outsideClickHandler = function(event) {
      const isClickInside = freshUserMenuButton.contains(event.target) || userDropdown.contains(event.target);
      
      if (!isClickInside && userDropdown.classList.contains('opacity-100')) {
        hideDropdown();
      }
    };

    // Cerrar dropdown con tecla Escape
    const keydownHandler = function(event) {
      if (event.key === 'Escape' && userDropdown.classList.contains('opacity-100')) {
        hideDropdown();
      }
    };

    document.addEventListener('click', outsideClickHandler);
    document.addEventListener('keydown', keydownHandler);

    console.log('Dropdown inicializado correctamente');
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDropdown);
  } else {
    initializeDropdown();
  }

  // Re-inicializar después de navegaciones de Astro
  document.addEventListener('astro:after-swap', function() {
    setTimeout(initializeDropdown, 100);
  });

  // También intentar con el evento de página cargada
  document.addEventListener('astro:page-load', function() {
    setTimeout(initializeDropdown, 100);
  });
</script>