---
export interface Props {
  currentPage?: string;
}

const { currentPage = "dashboard" } = Astro.props;

const menuItems = [
  { 
    name: 'Dashboard', 
    icon: 'M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2 2z', 
    href: '/', 
    id: 'dashboard'
  },
  { 
    name: 'Mi Perfil', 
    icon: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z',
    href: '/perfil',
    id: 'perfil'
  },
  { 
    name: 'Servicios', 
    icon: 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z',
    href: '/servicios',
    id: 'servicios'
  },
  { 
    name: 'Tickets', 
    icon: 'M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z',
    href: '/tickets',
    id: 'tickets'
  }
];
---

<!-- Botón hamburguesa (solo visible en móviles) -->
<button 
  id="mobileMenuButton"
  class="fixed top-4 left-4 z-50 lg:hidden p-2 rounded-lg bg-white border border-gray-200 shadow-md hover:bg-gray-50 transition-all duration-200"
>
  <svg class="h-6 w-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
  </svg>
</button>

<!-- Overlay para móviles -->
<div 
  id="mobileOverlay"
  class="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden opacity-0 invisible transition-all duration-300"
></div>

<!-- Sidebar -->
<aside 
  id="sidebar"
  class="fixed lg:static inset-y-0 left-0 z-40 w-43 bg-white border-r border-gray-200 transform -translate-x-full lg:translate-x-0 transition-transform duration-300 ease-in-out"
>
  <!-- Header del sidebar móvil -->
  <div class="flex items-center justify-between p-3 lg:hidden border-b border-gray-200">
    <span class="text-lg font-bold text-gray-900">[ NEVEN ]</span>
    <button 
      id="closeSidebarButton"
      class="p-2 rounded-lg hover:bg-gray-100 transition-colors"
    >
      <svg class="h-5 w-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  </div>

  <div class="p-3 lg:p-4">
    <nav class="space-y-1">
      {menuItems.map(item => (
        <a 
          href={item.href}
          class={`
            flex items-center px-3 py-3 lg:py-2.5 rounded-lg text-base lg:text-base font-medium
            transition-all duration-200 ease-linear
            focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-200
            ${currentPage === item.id
              ? 'bg-gray-100 text-gray-900' 
              : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
            }
          `}
        >
          <svg class="h-5 w-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={item.icon}/>
          </svg>
          {item.name}
        </a>
      ))}
    </nav>
  </div>
</aside>

<script is:inline>
  function initializeMobileSidebar() {
    const mobileMenuButton = document.getElementById('mobileMenuButton');
    const closeSidebarButton = document.getElementById('closeSidebarButton');
    const sidebar = document.getElementById('sidebar');
    const overlay = document.getElementById('mobileOverlay');
    
    if (!mobileMenuButton || !closeSidebarButton || !sidebar || !overlay) {
      console.log('Elementos del sidebar móvil no encontrados');
      return;
    }

    // Función para abrir el sidebar
    function openSidebar() {
      sidebar.classList.remove('-translate-x-full');
      sidebar.classList.add('translate-x-0');
      overlay.classList.remove('opacity-0', 'invisible');
      overlay.classList.add('opacity-100', 'visible');
      document.body.classList.add('overflow-hidden'); // Prevenir scroll en el body
    }

    // Función para cerrar el sidebar
    function closeSidebar() {
      sidebar.classList.add('-translate-x-full');
      sidebar.classList.remove('translate-x-0');
      overlay.classList.add('opacity-0', 'invisible');
      overlay.classList.remove('opacity-100', 'visible');
      document.body.classList.remove('overflow-hidden');
    }

    // Event listeners
    mobileMenuButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      openSidebar();
    });

    closeSidebarButton.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      closeSidebar();
    });

    // Cerrar al hacer clic en el overlay
    overlay.addEventListener('click', function(e) {
      e.preventDefault();
      closeSidebar();
    });

    // Cerrar con tecla Escape
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape' && !sidebar.classList.contains('-translate-x-full')) {
        closeSidebar();
      }
    });

    // Cerrar sidebar al cambiar de página en móviles
    const sidebarLinks = sidebar.querySelectorAll('a[href]');
    sidebarLinks.forEach(link => {
      link.addEventListener('click', function() {
        // Solo cerrar en móviles
        if (window.innerWidth < 1024) {
          setTimeout(closeSidebar, 100);
        }
      });
    });

    // Manejar cambios de tamaño de ventana
    window.addEventListener('resize', function() {
      if (window.innerWidth >= 1024) {
        // En desktop, asegurar que el sidebar esté visible y el body no tenga overflow hidden
        sidebar.classList.remove('-translate-x-full');
        sidebar.classList.add('translate-x-0');
        overlay.classList.add('opacity-0', 'invisible');
        overlay.classList.remove('opacity-100', 'visible');
        document.body.classList.remove('overflow-hidden');
      } else {
        // En móviles, asegurar que esté cerrado por defecto
        if (!sidebar.classList.contains('-translate-x-full')) {
          closeSidebar();
        }
      }
    });

    console.log('Sidebar móvil inicializado correctamente');
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMobileSidebar);
  } else {
    initializeMobileSidebar();
  }

  // Re-inicializar después de navegaciones de Astro
  document.addEventListener('astro:after-swap', function() {
    setTimeout(initializeMobileSidebar, 100);
  });

  // También intentar con el evento de página cargada
  document.addEventListener('astro:page-load', function() {
    setTimeout(initializeMobileSidebar, 100);
  });
</script>
<!--

=== INTERFAZ PROPS ===
- currentPage?: Página actual activa (string opcional, default: "dashboard")

=== DATOS DEL MENÚ ===
- menuItems: Array de objetos con id, label e icon (path SVG)
- Navegación condicional: Dashboard va a "/" y otros van a "/{id}"

=== CONTENEDOR PRINCIPAL (aside) ===
- w-48: Ancho fijo de 12rem (192px)
- bg-white: Fondo blanco
- border-r: Borde derecho
- border-gray-200: Color del borde en gris claro
- min-h-screen: Altura mínima del viewport completo

=== CONTENEDOR INTERNO ===
- p-4: Padding de 1rem (16px) en todos los lados

=== NAVEGACIÓN ===
- space-y-1: Espacio vertical de 0.25rem (4px) entre elementos hijos

=== ENLACES DEL MENÚ (estado base) ===
- flex: Display flex
- items-center: Alinea elementos verticalmente al centro
- space-x-2: Espacio horizontal de 0.5rem (8px) entre icono y texto
- px-2: Padding horizontal de 0.5rem (8px)
- py-1.5: Padding vertical de 0.375rem (6px)
- rounded-lg: Bordes redondeados grandes
- text-sm: Tamaño de texto pequeño (14px)
- font-medium: Peso de fuente medium
- transition-colors: Transición suave en cambios de color

=== ESTADOS CONDICIONALES ===
PÁGINA ACTIVA (currentPage === item.id):
- bg-gray-100: Fondo gris claro
- text-gray-900: Texto gris muy oscuro

PÁGINA INACTIVA:
- text-gray-600: Texto gris medio
- hover:bg-gray-50: Al hover, fondo gris muy claro
- hover:text-gray-900: Al hover, texto gris muy oscuro

=== ICONOS SVG ===
- w-4 h-4: Tamaño de 1rem x 1rem (16px)
- fill="none": Sin relleno
- stroke="currentColor": Usa el color del texto actual
- viewBox="0 0 24 24": Vista del SVG 24x24
- stroke-linecap="round": Extremos de línea redondeados
- stroke-linejoin="round": Uniones de línea redondeadas
- stroke-width="2": Grosor de línea de 2px

=== FUNCIONALIDAD ===
- .map(): Itera sobre menuItems para crear enlaces dinámicamente
- Template literal con clases condicionales usando operador ternario
- Renderizado dinámico del path SVG con {item.icon}
- Navegación inteligente: Dashboard → "/" | Otros → "/{item.id}"
-->