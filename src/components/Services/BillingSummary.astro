---
import Card from "../Card.astro";

export interface Props {
  billing: {
    summary: {
      totalMonthly: number;
      currency: string;
      activeServices: number;
      activePackages: number;
      nextBillingDate: string;
      paymentMethod: string;
    };
    taxes: {
      subtotal: number;
      iva: number;
      total: number;
    };
  };
}

const { billing } = Astro.props;

// Función para formatear precio
function formatPrice(amount: number, currency: string): string {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: currency
  }).format(amount);
}

// Formatear fecha - maneja múltiples formatos
function formatDate(dateString: string): string {
  if (!dateString || dateString === "N/A") {
    return "N/A";
  }
  
  try {
    // Si la fecha viene en formato español "DD de MMMM de YYYY"
    if (dateString.includes(" de ")) {
      const meses = {
        'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',
        'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',
        'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'
      };
      
      const parts = dateString.toLowerCase().split(" de ");
      if (parts.length === 3) {
        const day = parts[0].padStart(2, '0');
        const month = meses[parts[1] as keyof typeof meses];
        const year = parts[2];
        
        if (month) {
          const isoDate = `${year}-${month}-${day}`;
          const date = new Date(isoDate);
          if (!isNaN(date.getTime())) {
            return date.toLocaleDateString('es-MX', {
              day: 'numeric',
              month: 'short'
            });
          }
        }
      }
    }
    
    // Intentar parsear como fecha estándar
    const date = new Date(dateString);
    if (!isNaN(date.getTime())) {
      return date.toLocaleDateString('es-MX', {
        day: 'numeric',
        month: 'short'
      });
    }
    
    // Si no se puede parsear, devolver el string original
    return dateString;
  } catch (error) {
    console.error('Error formatting date:', dateString, error);
    return dateString;
  }
}
---

<Card>
  <div class="px-6 sm:px-8 lg:px-10 py-6 sm:py-8 lg:py-10">
    <div class="flex items-center mb-6 sm:mb-8">
      <svg class="h-8 w-8 sm:h-10 sm:w-10 mr-4 sm:mr-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
      </svg>
      <div>
        <h2 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-gray-900">Resumen de Facturación</h2>
        <p class="text-base sm:text-lg lg:text-xl text-gray-600 mt-2 leading-relaxed">Información consolidada de tus servicios activos</p>
      </div>
    </div>

    <!-- Resumen principal -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 mb-6 sm:mb-8">
      <div class="text-center p-4 sm:p-6 lg:p-8 bg-blue-50 rounded-lg">
        <p class="text-2xl sm:text-3xl lg:text-4xl font-bold text-blue-600">{formatPrice(billing.summary.totalMonthly, billing.summary.currency)}</p>
        <p class="text-sm sm:text-base lg:text-lg text-gray-600 mt-2">Subtotal mensual</p>
      </div>
      <div class="text-center p-4 sm:p-6 lg:p-8 bg-green-50 rounded-lg">
        <p class="text-2xl sm:text-3xl lg:text-4xl font-bold text-green-600">{billing.summary.activeServices + billing.summary.activePackages}</p>
        <p class="text-sm sm:text-base lg:text-lg text-gray-600 mt-2">Servicios/Paquetes activos</p>
      </div>
      <div class="text-center p-4 sm:p-6 lg:p-8 bg-orange-50 rounded-lg">
        <p class="text-2xl sm:text-3xl lg:text-4xl font-bold text-orange-600">{formatDate(billing.summary.nextBillingDate)}</p>
        <p class="text-sm sm:text-base lg:text-lg text-gray-600 mt-2">Próxima facturación</p>
      </div>
      <div class="text-center p-4 sm:p-6 lg:p-8 bg-purple-50 rounded-lg">
        <p class="text-2xl sm:text-3xl lg:text-4xl font-bold text-purple-600">{formatPrice(billing.taxes.total, billing.summary.currency)}</p>
        <p class="text-sm sm:text-base lg:text-lg text-gray-600 mt-2">Total con IVA</p>
      </div>
    </div>

    <!-- Detalles adicionales -->
    <div class="bg-gray-50 p-4 sm:p-6 lg:p-8 rounded-lg">
      <h3 class="font-semibold text-lg sm:text-xl lg:text-2xl text-gray-700 mb-4 sm:mb-6">Información de facturación:</h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 text-base sm:text-lg lg:text-xl">
        <div class="flex flex-col sm:flex-row sm:items-center">
          <span class="text-gray-600">Método de pago:</span>
          <span class="font-medium sm:ml-3">{billing.summary.paymentMethod}</span>
        </div>
        <div class="flex flex-col sm:flex-row sm:items-center">
          <span class="text-gray-600">Próximo cargo:</span>
          <span class="font-medium sm:ml-3">{formatDate(billing.summary.nextBillingDate)}</span>
        </div>
      </div>
    </div>
  </div>
</Card>
