---
import Card from "../Card.astro";

export interface Props {
  package: {
    id: string;
    name: string;
    status: string;
    description: string;
    monthlyPrice: number;
    currency: string;
    contractDate: string;
    nextBilling: string;
    remainingMonths: number;
    includedServices: Array<{
      name: string;
      description: string;
      details?: any;
    }>;
  };
}

const { package: pkg } = Astro.props;

// Función para formatear precio
function formatPrice(amount: number, currency: string): string {
  return new Intl.NumberFormat('es-MX', {
    style: 'currency',
    currency: currency
  }).format(amount);
}

// Función para formatear fechas que vienen del API
function formatDate(dateString: string): string {
  if (!dateString) return 'No disponible';
  
  try {
    // Si la fecha viene en formato español "DD de MMMM de YYYY"
    if (dateString.includes(' de ')) {
      const monthMap: { [key: string]: string } = {
        'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',
        'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',
        'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12'
      };
      
      const parts = dateString.split(' de ');
      if (parts.length === 3) {
        const day = parts[0].padStart(2, '0');
        const month = monthMap[parts[1].toLowerCase()];
        const year = parts[2];
        
        if (month) {
          const isoDate = `${year}-${month}-${day}`;
          const date = new Date(isoDate);
          
          if (!isNaN(date.getTime())) {
            return date.toLocaleDateString('es-MX', {
              day: '2-digit',
              month: '2-digit',
              year: 'numeric'
            });
          }
        }
      }
    }
    
    // Si es una fecha en formato estándar
    const date = new Date(dateString);
    if (!isNaN(date.getTime())) {
      return date.toLocaleDateString('es-MX', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    }
    
    // Si no se puede parsear, devolver el string original
    return dateString;
  } catch (error) {
    return dateString;
  }
}

// Badge styles para status
const getStatusBadge = (status: string) => {
  const baseClasses = "inline-flex items-center rounded-full px-3 sm:px-4 py-1.5 sm:py-2 text-sm sm:text-base font-semibold";
  
  switch (status) {
    case "Activo":
      return `${baseClasses} bg-green-100 text-green-800`;
    case "Pendiente":
      return `${baseClasses} bg-yellow-100 text-yellow-800`;
    case "Pausado":
      return `${baseClasses} bg-gray-100 text-gray-800`;
    default:
      return `${baseClasses} bg-gray-100 text-gray-800`;
  }
};
---

<Card className="border-2 border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
  <div class="px-6 sm:px-8 lg:px-10 py-6 sm:py-8 lg:py-10">
    <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-6 sm:gap-8 mb-6 sm:mb-8">
      <div class="flex items-start space-x-4 sm:space-x-6">
        <div class="p-3 sm:p-4 bg-blue-100 rounded-full flex-shrink-0">
          <svg class="h-8 w-8 sm:h-10 sm:w-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
          </svg>
        </div>
        <div class="min-w-0 flex-1">
          <span class={getStatusBadge(pkg.status)}>{pkg.status}</span>
          <h3 class="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900 mt-2 sm:mt-3">{pkg.name}</h3>
          <p class="text-base sm:text-lg lg:text-xl text-gray-600 mt-2 leading-relaxed">{pkg.description}</p>
        </div>
      </div>
      <div class="text-center sm:text-right flex-shrink-0">
        <p class="text-2xl sm:text-3xl lg:text-4xl font-bold text-blue-600">{formatPrice(pkg.monthlyPrice, pkg.currency)}</p>
        <p class="text-sm sm:text-base lg:text-lg text-gray-600">por mes</p>
      </div>
    </div>

    <!-- Información de vigencia -->
    <div class="bg-white/70 p-4 sm:p-6 lg:p-8 rounded-lg space-y-3 sm:space-y-4 mb-6 sm:mb-8">
      <div class="flex justify-between text-sm sm:text-base lg:text-lg">
        <span class="text-gray-600">Fecha de contratación:</span>
        <span class="font-medium">{formatDate(pkg.contractDate)}</span>
      </div>
      <div class="flex justify-between text-sm sm:text-base lg:text-lg">
        <span class="text-gray-600">Próxima facturación:</span>
        <span class="font-medium">{formatDate(pkg.nextBilling)}</span>
      </div>
      <div class="flex justify-between text-sm sm:text-base lg:text-lg">
        <span class="text-gray-600">Vigencia:</span>
        <span class="font-medium text-green-600">{pkg.remainingMonths} meses restantes</span>
      </div>
    </div>

    <!-- Servicios incluidos -->
    <div class="space-y-4 sm:space-y-6">
      <h4 class="font-semibold text-lg sm:text-xl lg:text-2xl text-gray-700">Servicios incluidos:</h4>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
        {pkg.includedServices.map(service => (
          <div class="flex items-start space-x-3 sm:space-x-4">
            <div class="w-2 h-2 sm:w-3 sm:h-3 bg-blue-600 rounded-full mt-2 sm:mt-2.5 flex-shrink-0"></div>
            <div class="min-w-0 flex-1">
              <p class="text-base sm:text-lg font-medium text-gray-900">{service.name}</p>
              <p class="text-sm sm:text-base lg:text-lg text-gray-600 mt-1 leading-relaxed">{service.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</Card>
